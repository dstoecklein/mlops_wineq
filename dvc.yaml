stages:
  # stage 1: get remote data and save it in data/raw
  # check dependencies - these files need to be present
  get_data:
    cmd: python src/get_raw_data.py --config=config.yaml
    deps:
      - src/get_remote_data.py
      - src/get_raw_data.py
      - data_remote/winequality.csv
    outs:
      - data/raw/winequality.csv

  train_test_split:
    cmd: python src/train_test_split.py --config=config.yaml
    deps:
      - src/train_test_split.py
      - data/raw/winequality.csv
    outs:
      - data/processed/train_winequality.csv
      - data/processed/test_winequality.csv

  train:
    cmd: python src/train.py --config=config.yaml
    deps:
      - src/train.py
      - src/evaluate.py
      - data/processed/train_winequality.csv
      - data/processed/test_winequality.csv
    params:
      - config.yaml: # default would be params.yaml
        - models.ElasticNet.params.alpha
        - models.ElasticNet.params.l1_ratio
    #metrics: # will be shown with command dvc metrics show
    #  - reports/metrics.json:
    #      cache: false # dvc cache
    #  - reports/params.json:
    #      cache: false
    #outs:
    #  - saved_models/model.joblib
    
  log_production_model:
    cmd: python src/log_production_model.py --config=config.yaml
    deps:
    - src/log_production_model.py